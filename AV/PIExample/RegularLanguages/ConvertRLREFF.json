{
    "translations": {
      "en": {
        "q5": {
          "type": "select",
          "description": "$\\textbf {Definition}$: A complete GTG is a complete graph, meaning that every state has a transition to every other state. Any GTG can be converted to a complete GTG by adding edges labeled $\\emptyset$ as needed.",
          "question":"What is GTG",
          "answer": ["Complete Transition Graph", "A graph with edges labeled by Regular Expressions"],
          "choices": ["Complete Transition Graph", "A graph with edges labeled by Regular Expressions"]
        },
        "q6": {
          "type": "multiple",
          "description": "$\\textbf {Definition}$: A complete GTG is a complete graph, meaning that every state has a transition to every other state. Any GTG can be converted to a complete GTG by adding edges labeled $\\emptyset$ as needed.",
          "question":"How to convert any GTG to be complete GTG",
          "answer": "Add all missing edges with $\\emptyset$ labels",
          "choices": ["Add all missing edges with $\\emptyset$ labels", "Connect all nodes together"]
        },
        "q7": {
          "type": "select",
          "description": "$\\textbf {Proof}$:<br> $L$ is regular $\\Rightarrow \\exists$ NFA $M$ such that $L=L(M)$.",
          "question":"What do we nean by L is regular",
          "answer": ["L accepted by a DFA", "L accepted by an NFA", "L described by a regular expression"],
          "choices": ["L accepted by a DFA", "L accepted by an NFA", "L described by a regular expression"]
        },
        "q8": {
          "type": "multiple",
          "description": "$\\textbf {Proof}$:<br> $L$ is regular $\\Rightarrow \\exists$ NFA $M$ such that $L=L(M)$.<br> $\\textbf {1}$ Assume $M$ has one final state, and $q_0 \\not\\in F$.<br>  $\\textbf {2}$ Convert $M$ to a complete GTG.",
          "question":"How to convert any GTG to be complete GTG",
          "answer": "Add all missing edges with $\\emptyset$ labels",
          "choices": ["Add all missing edges with $\\emptyset$ labels", "Connect all nodes together"]
        },
        "q9": {
          "type": "multiple",
          "description": "$\\textbf {Proof}$:<br> $L$ is regular $\\Rightarrow \\exists$ NFA $M$ such that $L=L(M)$.<br> $\\textbf {1}$ Assume $M$ has one final state, and $q_0 \\not\\in F$.<br>  $\\textbf {2}$ Convert $M$ to a complete GTG.<br> Let $r_{ij}$ stand for the label of the edge from $q_i$ to $q_j$",
          "question":"What does $q_{ji}$ mean?",
          "answer": "label for transiton from $q_j$ to $q_i$",
          "choices": ["label for transiton from $q_i$ to $q_j$", "label for transiton from $q_j$ to $q_i$", "label for transiton from $q_i$ to $q_i$", "label for transiton from $q_j$ to $q_j$"]
        },
        "q11": {
          "type": "multiple",
          "description": "Then, the corresponding regular expression is:<br> $r=(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗r_{ii}^*r_{ij}r_{jj}^*$",
          "question":"Now, lets find how this RegEx created form the GTG on the left. Think about the first part of the RegEx: $(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗$. What does $r_{ii}^*$ mean?",
          "answer": "$r_{ii}^*$ means that, when the machine at the start state, it may loop Zero or more times to read Zero or more repeatition of $r_{ii}$",
          "choices": ["$r_{ii}^*$ means that, when the machine at the start state, it may loop Zero or more times to read Zero or more repeatition of $r_{ii}$",
          "Something else"]
        },
        "q12": {
          "type": "multiple",
          "description": "Then, the corresponding regular expression is:<br> $r=(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗r_{ii}^*r_{ij}r_{jj}^*$",
          "question":"Think about the first part of the RegEx: $(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗$. What does $r_{ij}^*$ mean?",
          "answer": "The machine then will move to state $qj$ by reading $r_{ij}$",
          "choices": ["The machine then will move to state $qj$ by reading $r_{ij}$",
          "Something else"]
        },
        "q13": {
          "type": "multiple",
          "description": "Then, the corresponding regular expression is:<br> $r=(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗r_{ii}^*r_{ij}r_{jj}^*$",
          "question":"Think about the first part of the RegEx: $(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗$. What does $r_{jj}^*$ mean?",
          "answer": "Once the meachine is at $qj$ it may loop zero or more times to read zero or more occurance of $r_{jj}$",
          "choices": ["Once the meachine is at $qj$ it may loop zero or more times to read zero or more occurance of $r_{jj}$",
          "Something else"]
        },
        "q14": {
          "type": "multiple",
          "description": "Then, the corresponding regular expression is:<br> $r=(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗r_{ii}^*r_{ij}r_{jj}^*$",
          "question":"Think about the first part of the RegEx: $(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗$. What does $r_{ji}^*$ mean?",
          "answer": "It means that the machine can go back to $qi$ by reading $r_{ji}$",
          "choices": ["It means that the machine can go back to $qi$ by reading $r_{ji}$",
          "Something else"]
        },
        "q15": {
          "type": "multiple",
          "description": "Then, the corresponding regular expression is:<br> $r=(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗r_{ii}^*r_{ij}r_{jj}^*$",
          "question":"Think about the first part of the RegEx: $(r_{ii}^*r_{ij}r_{jj}^*r_{ji})^∗$. Why we used the $($___$)^*$?",
          "answer": "This means that the machine can repeate the previous part for zero or more times and end at $qi$",
          "choices": ["This means that the machine can repeate the previous part for zero or more times and end at $qi$",
          "Something else"]
        },
        
        "q18": {
          "type": "multiple",
          "description": "Of course, we might have a machine with its start state also a final state. There are two ways to deal with this. One is to come up with a rule in this case. (Hint: Its the same rule, with an extra “OR” added for the case where we stay in the start state.) The other is to first convert our NFA to one with a single final state (separate from the start state).",
          "question":"How can we convert an NFA to be with a single final state only",
          "answer": "Create a new final state and connect all final states to it with $\\lambda$ transitions",
          "choices": ["Convert it to a DFA", "Create a new final state and connect all final states to it with $\\lambda$ transitions"]
        },
        "q21": {
          "type": "multiple",
          "description": "Make the following replacements:<br> REPLACE<br> $r_{ii} \\Rightarrow r_{ii}+r_{ik}r_{kk}^*r_{ki}$",
          "question":"Why do we made that replacement?",
          "answer": "$qi$ can go to itself by passing through $qk$. It will read $r_{ik}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving back to $qi$ by reading $r_{ki}$",
          "choices": ["$qi$ can go to itself by passing through $qk$. It will read $r_{ik}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving back to $qi$ by reading $r_{ki}$", "I do not know"]
        },
        "q22": {
          "type": "multiple",
          "description": "Make the following replacements:<br> REPLACE<br> $r_{ii} \\Rightarrow r_{ii}+r_{ik}r_{kk}^*r_{ki}$<br> $r_{jj} \\Rightarrow r_{jj}+r_{jk}r_{kk}^*r_{kj}$",
          "question":"Why do we made that new replacement?",
          "answer": "$qj$ can go to itself by passing through $qk$. It will read $r_{jk}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving back to $qj$ by reading $r_{kj}$",
          "choices": ["$qj$ can go to itself by passing through $qk$. It will read $r_{jk}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving back to $qj$ by reading $r_{kj}$", "I do not know"]
        },
        "q23": {
          "type": "multiple",
          "description": "Make the following replacements:<br> REPLACE<br> $r_{ii} \\Rightarrow r_{ii}+r_{ik}r_{kk}^*r_{ki}$<br> $r_{jj} \\Rightarrow r_{jj}+r_{jk}r_{kk}^*r_{kj}$<br> $r_{ij} \\Rightarrow r_{ij}+r_{ik}r_{kk}^*k_{kj}$.",
          "question":"Why do we made that new replacement?",
          "answer": "$qi$ can go to state $qj$ by passing through $qk$. It will read $r_{ik}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving to $qj$ by reading $r_{kj}$",
          "choices": ["$qi$ can go to state $qj$ by passing through $qk$. It will read $r_{ik}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving to $qj$ by reading $r_{kj}$", "I do not know"]
        },
        "q24": {
          "type": "multiple",
          "description": "Make the following replacements:<br> REPLACE<br> $r_{ii} \\Rightarrow r_{ii}+r_{ik}r_{kk}^*r_{ki}$<br> $r_{jj} \\Rightarrow r_{jj}+r_{jk}r_{kk}^*r_{kj}$<br> $r_{ij} \\Rightarrow r_{ij}+r_{ik}r_{kk}^*k_{kj}$<br> $r_{ji} \\Rightarrow r_{ji}+r_{jk}r_{kk}^*r_{ki}$",
          "question":"Why do we made that new replacement?",
          "answer": "$qj$ can go to state $qi$ by passing through $qk$. It will read $r_{jk}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving to $qi$ by reading $r_{ki}$",
          "choices": ["$qj$ can go to state $qi$ by passing through $qk$. It will read $r_{jk}$ then looping in $qk$ to read zero or more $r_{kk}$ then moving to $qi$ by reading $r_{ki}$", "I do not know"]
        }
      }
    }
  }
  