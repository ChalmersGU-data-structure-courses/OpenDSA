.. This file is part of the OpenDSA eTextbook project. See
.. http://opendsa.org for more details.
.. Copyright (c) 2012-2020 by the OpenDSA Project Contributors, and
.. distributed under an MIT open source license.

.. avmetadata::
   :author: Cliff Shaffer

.. slideconf::
   :autoslides: False

================
Project 1 Design
================

Project 1 Design
----------------

.. slide:: Project 1

   | Be aware of the due date and milestone dates
   | Aim to get it done PRIOR to the EARLY BONUS date.
   | You need to write a "scanner" or "parser" to read info from
     command file (text).
   | You need to use command line parameters
   |   See Tutorials in Chapter 3 of OpenDSA
   |   For parsing: Use Scanner Class [3.7] or
       Pattern/Matcher classes

.. slide:: Project 1 Class Organization (1)

   | Q: When do you need separate classes?
   |   Wrong A: When they get too long
   |   Right A: When they separate meaningfully different behavior
   | Things you need in this project
   |   Multiple data structures (hash table class, memory manager class)
   |   "Main" routine, that sets things up
   |   Command syntactic parsing (separate the behavior, NOT the code length)
   |   Command semantic processing (separate the behavior, NOT the code length)
           
.. slide:: Project 1 Class Organization (2)

   | Bad:
   |   Main Class (Scanner/interpreter)  ==> Main Data Structures           
   | Good:
   |   Main (Program parameters, initialization) ==>
   |     Parser (Syntactic processing of commands) ==>
   |       "Database" or "World" (symantic processing of commands) ==> 
   |         Various data structures classes

   .. note::
    it is highly likely that you will need a command parser for multiple projects...PLAN ACCORDINGLY
           
.. slide:: Scheduling the project

   | Most people find these projects to be hard and/or time consuming
   |   Need some planning structure
   |   Milestones help to enforce time management
   |   Incremental Development is ** *crucial * ** to success
   | Scheduling the project:
   |   1. Main/Parser first.
   |   2. World Database class next.
   |   3. Complete BST and Node classes next.
   |   4. Everything else.
         

.. slide:: General Project Info              

   | You are usually banned from using standard Java data structures
     classes
   |   You may **not** use things like ``HashMap``, ``ListArray``, ``Vector``, etc.
   |   You **may** use the java.awt.Rectangle Class as the basis for your Rectangle.
   |   You may use standard language features like arrays
   |   You may use string and file manipulation classes/methods that
       make parsing of the command file easy.          

.. slide:: Good Design Practice

   | Good names matter. REALLY!
   | Every competent software development organization enforces some
     coding style.
        Web-CAT does impose a code style. See OpenDSA Section 3.4.4
   | Generalize your container classes
   |   For P1, your BST should not be so specialized than it can only
       hold rectangles. It should be possible to replace the Rectangle
       with some other shape without altering the BST itself.


.. slide:: Container Classes

   | The Node is a container class. A container class is anything
     that stores a collection of arbitrary objects.
   | Want to support any shape type.
   | We will talk about this later in general.
   | Need to deal with concept of comparison. Your program will need to
     address comparing two Rectangles.
