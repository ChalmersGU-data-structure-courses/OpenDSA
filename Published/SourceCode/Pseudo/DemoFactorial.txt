
// Recursively compute and return n!
factorial_recursive(n:int) : int
    // Precondition: n >= 0
    if n <= 1
        return 1   // Base case: return base solution
    else
        return n * factorial_recursive(n-1)   // Recursive call for n > 1

// Return n!
factorial_stack(n:int) : int
    // Precondition: n >= 0
    S : Stack = new LinkedStack()
    while n > 1
        S.push(n)
        n -= 1
    result = 1
    while S.size() > 0
        result = result * S.pop()
    return result
