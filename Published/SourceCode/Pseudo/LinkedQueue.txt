
class LinkedQueue(E) implements Queue(E)
    private front      : Node   // Pointer to front queue node
    private rear       : Node   // Pointer to rear queue node
    private queueSize  : int    // Size of queue

    LinkedQueue()
        front = null
        rear = null
        queueSize = 0

    private class Node
        elem : E      // Value for this node
        next : Node   // Pointer to next node in list

    enqueue(x:E)
        newRear : E = new Node(x, null)
        if queueSize == 0
            front = newRear
        else
            rear.next = newRear
        rear = newRear
        queueSize += 1

    peek() : E
        // Precondition: queueSize > 0
        return front.elem

    dequeue() : E
        // Precondition: queueSize > 0
        removed : Node = front
        front = removed.next
        removed.next = null   // For garbage collection
        queueSize -= 1
        if queueSize == 0
            rear = null
        return removed.elem

    isEmpty() : boolean
        return queueSize == 0

    size() : int
        return queueSize

    iterator() : Iterator(E)
        return an iterator over the elements in the queue, starting from the frontmost element
