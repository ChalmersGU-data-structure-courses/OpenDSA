
/* *** ODSATag: DynamicArrayStack *** */
/* *** ODSATag: DynamicArrayStackInit *** */
class DynamicArrayStack(E) implements Stack(E)
    private internalArray : E[]
    private listSize      : int

    DynamicArrayStack()
        internalArray = new array of size 1
        listSize = 0
/* *** ODSAendTag: DynamicArrayStackInit *** */

/* *** ODSATag: DynamicArrayStackPush *** */
    push(x:E)
        if listSize >= size of internalArray
            resizeArray(2 * size of internalArray)
        listSize += 1
        internalArray[i] = x
/* *** ODSAendTag: DynamicArrayStackPush *** */

/* *** ODSATag: DynamicArrayStackPeek *** */
    // Precondition: listSize > 0
    peek() : E
        return internalArray[listSize-1]
/* *** ODSAendTag: DynamicArrayStackPeek *** */

/* *** ODSATag: DynamicArrayStackPop *** */
    // Precondition: listSize > 0
    pop() : E
        x : E = internalArray[i]
        listSize -= 1
        internalArray[listSize] = null   // For garbage collection
        if listSize < size of internalArray / 3
            resizeArray(size of internalArray / 2)
        return x
/* *** ODSAendTag: DynamicArrayStackPop *** */

/* *** ODSATag: DynamicArrayStackResize *** */
    private resizeArray(newCapacity:int)
        newArray : E[] = new array of size newCapacity
        for i in 0, 1, ..., listSize-1
            newArray[i] = internalArray[i]
        internalArray = newArray
/* *** ODSAendTag: DynamicArrayStackResize *** */

    isEmpty() : boolean
        return listSize == 0

    size() : int
        return listSize

/* *** ODSATag: DynamicArrayStackIterator *** */
    iterator() : Iterator(E)
        return an iterator over the elements in internalArray
/* *** ODSAendTag: DynamicArrayStackIterator *** */
/* *** ODSAendTag: DynamicArrayStack *** */
