
/* *** ODSATag: DynamicArrayStack *** */
/* *** ODSATag: DynamicArrayStackInit *** */
class DynamicArrayStack(E) implements Stack(E)
    private internalArray : E[]   // Internal array containing the stack elements
    private stackSize     : int   // Size of stack, and index of the next free slot

    constant MinCapacity        : int    = 8     // Minimum capacity of internalArray
    constant MinLoadFactor      : double = 0.5   // Must be smaller than 1/CapacityMultiplier
    constant CapacityMultiplier : double = 1.5   // Factor to grow/shrink the capacity

    DynamicArrayStack()
        internalArray = new array of size MinCapacity
        stackSize = 0
/* *** ODSAendTag: DynamicArrayStackInit *** */

/* *** ODSATag: DynamicArrayStackPush *** */
    push(x:E)
        if stackSize >= size of internalArray
            resizeArray(size of internalArray * CapacityMultiplier)
        internalArray[stackSize] = x
        stackSize += 1
/* *** ODSAendTag: DynamicArrayStackPush *** */

/* *** ODSATag: DynamicArrayStackPeek *** */
    peek() : E
        // Precondition: stackSize > 0
        return internalArray[stackSize-1]
/* *** ODSAendTag: DynamicArrayStackPeek *** */

/* *** ODSATag: DynamicArrayStackPop *** */
    pop() : E
        // Precondition: stackSize > 0
        stackSize -= 1
        x : E = internalArray[stackSize]
        internalArray[stackSize] = null   // For garbage collection
        if stackSize < size of internalArray * MinLoadFactor
            resizeArray(size of internalArray / CapacityMultiplier)
        return x
/* *** ODSAendTag: DynamicArrayStackPop *** */

/* *** ODSATag: DynamicArrayStackResize *** */
    private resizeArray(newCapacity:int)
        return if newCapacity < MinCapacity
        newArray : E[] = new array of size newCapacity
        for i in 0, 1, ..., stackSize-1
            newArray[i] = internalArray[i]
        internalArray = newArray
/* *** ODSAendTag: DynamicArrayStackResize *** */

    isEmpty() : boolean
        return stackSize == 0

    size() : int
        return stackSize

/* *** ODSATag: DynamicArrayStackIterator *** */
    iterator() : Iterator(E)
        return an iterator over the elements in internalArray, starting from the top element
/* *** ODSAendTag: DynamicArrayStackIterator *** */
/* *** ODSAendTag: DynamicArrayStack *** */
