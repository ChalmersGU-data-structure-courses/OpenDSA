
/* *** ODSATag: DynamicArray *** */
/* *** ODSATag: DynamicArrayInit *** */
class DynamicArray(E) extends Collection(E)
    private internalArray :: E[]
    private arraySize     :: int

    DynamicArray()
        internalArray = new array of size 1
        arraySize = 0
/* *** ODSAendTag: DynamicArrayInit *** */

    get(i::int) :: E
        return internalArray[i]

    set(i::int, x::E) :: E
        E old = internalArray[i]
        internalArray[i] = x
        return old

/* *** ODSATag: DynamicArrayAppend *** */
    append(x::E) :: void
        if arraySize >= size of internalArray
            resizeArray(2 * size of internalArray)
        internalArray[arraySize] = x
        arraySize += 1
/* *** ODSAendTag: DynamicArrayAppend *** */

/* *** ODSATag: DynamicArrayRemove *** */
    removeLast() :: E
        arraySize -= 1
        E removed = internalArray[arraySize]
        // This is to be able to garbage collect the last element
        internalArray[arraySize] = null
        if arraySize < size of internalArray / 3
            resizeArray(size of internalArray / 2)
        return removed
/* *** ODSAendTag: DynamicArrayRemove *** */

/* *** ODSATag: DynamicArrayResize *** */
    private resizeArray(newCapacity::int) :: void
        E[] newArray = new array of size newCapacity
        for i in 0...arraySize-1
            newArray[i] = internalArray[i]
        internalArray = newArray
/* *** ODSAendTag: DynamicArrayResize *** */

    isEmpty() :: boolean
        return arraySize == 0

    size() :: int
        return arraySize

/* *** ODSATag: DynamicArrayIterator *** */
    iterator() :: Iterator(E)
        return an iterator over the elements in internalArray
/* *** ODSAendTag: DynamicArrayIterator *** */
/* *** ODSAendTag: DynamicArray *** */

