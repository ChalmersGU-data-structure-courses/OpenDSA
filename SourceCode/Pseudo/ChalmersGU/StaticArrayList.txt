
/* *** ODSATag: StaticArrayList *** */
/* *** ODSATag: StaticArrayListInit *** */
class StaticArrayList(E) extends List(E)
    private internalArray :: E[]
    private arraySize     :: int

    StaticArrayList(capacity::int)
        internalArray = new array of size capacity
        arraySize = 0
/* *** ODSAendTag: StaticArrayListInit *** */

/* *** ODSATag: StaticArrayListGetSet *** */
    get(i::int) :: E
        assert 0 <= i < size of internalArray
        return internalArray[i]

    set(i::int, x::E) :: E
        assert 0 <= i < size of internalArray
        E old = internalArray[i]
        internalArray[i] = x
        return old
/* *** ODSAendTag: StaticArrayListGetSet *** */

/* *** ODSATag: StaticArrayListAdd *** */
    add(i::int, x::E) :: void
        assert arraySize < size of internalArray
        assert 0 <= i <= size of internalArray
        for k in arraySize...i+1 (downwards)
            internalArray[k] = internalArray[k-1]
        internalArray[i] = x
        arraySize += 1
/* *** ODSAendTag: StaticArrayListAdd *** */

/* *** ODSATag: StaticArrayListRemove *** */
    remove(i::int) :: E
        assert size of internalArray > 0
        assert 0 <= i < size of internalArray
        E removed = internalArray[i]
        arraySize -= 1
        for k in i...arraySize-1
            internalArray[k] = internalArray[k+1]
        // This is to be able to garbage collect the last element
        internalArray[arraySize] = null
        return removed
/* *** ODSAendTag: StaticArrayListRemove *** */

    isEmpty() :: boolean
        return arraySize == 0

    size() :: int
        return arraySize

    iterator() :: Iterator(E)
        return an iterator over the elements in internalArray
/* *** ODSAendTag: StaticArrayList *** */
