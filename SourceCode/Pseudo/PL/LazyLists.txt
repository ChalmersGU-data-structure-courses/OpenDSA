/* *** ODSATag: LazyList1 *** */
// Construct a new sequence comprised of the given integer and thunk
var cons = function (n,thunk) { ... }          // code the is module
// Example of constructing a sequence using the is module, in this 
// example, the sequence consisting of all 1s
var ones = is.cons(1,
		   function () { return ones; } );
// Get the first integer in the  sequence
var hd = function (seq) { ... }                // code the is module
// Example of using the is.hs operation
is.hd(ones);
// Get the the infinite sequence following the first element.  This
// will itself be in the form of an integer followed by a thunk
var tl = function (seq) { ... }                // code the is module
// Example of using the is.tl operation
var more_ones = is.tl(ones);
// Return the (finite, non-lazy) list containing the first n
// integers in the given sequence
var take = function (seq,n) { ... }            // code the is module
// Example of using the is.take operation
is.take(ones,5);
/* *** ODSAendTag: LazyList1 *** */

/* *** ODSATag: LazyList2 *** */
// return the sequence of successive integers starting at n
var from = function (n) {
    return cons(n, function () { ?????? });
    return cons(n, function () { return n + 1; });
    return cons(n, function () { return from(n + 1); });
};

// Example of using from
var intsFrom1 = is.from(1);
var h = is.hd(intsFrom1);
var s1 = is.tl(intsFrom1);
var s2 = is.tl(is.tl(intsFrom1));
var s3 = is.take(s2, 6);
/* *** ODSAendTag: LazyList2 *** */
